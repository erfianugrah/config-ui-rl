---
import Layout from '../layouts/Layout.astro';
import RuleForm from '../components/RuleForm.svelte';
import RuleModal from '../components/RuleModal.svelte';
import ViewRuleModal from '../components/ViewRuleModal.svelte';
import { ADD_RULE_BUTTON_TEXT } from '../lib/config-variables';
---

<Layout title="Rate Limit Configuration">
  <h1 class="text-3xl font-bold mb-8 text-center">Rate Limit Configuration</h1>
  
  <div id="error-message" class="error-message bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 hidden" role="alert">
    <strong class="font-bold">Error:</strong>
    <span id="error-text" class="block sm:inline"></span>
  </div>
  
  <div id="ruleModals" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    <!-- Rule modals will be dynamically inserted here -->
  </div>

  <button id="addNewRule" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">
    {ADD_RULE_BUTTON_TEXT}
  </button>

  <div id="configForm" class="hidden">
    <RuleForm client:idle />
  </div>

<div id="viewRuleModal" class="hidden">
  <ViewRuleModal client:idle rule={null} onClose={() => {
    document.getElementById('viewRuleModal').classList.add('hidden');
  }} />
</div>

  <div id="message" class="mt-4 text-center font-bold"></div>
</Layout>

<script>
  import { loadConfiguration, saveConfiguration } from '../lib/config-utils';

  let currentRules = [];

  async function initializeConfig() {
    try {
      console.log('Initializing configuration...');
      const config = await loadConfiguration();
      console.log('Configuration loaded successfully:', config);
      currentRules = config.rules || [];
      updateRuleModals();
    } catch (error) {
      console.error('Error initializing configuration:', error);
      showError(error.message);
    }
  }

  function showError(message) {
    console.error('Showing error:', message);
    const errorElement = document.getElementById('error-message');
    const errorTextElement = document.getElementById('error-text');
    errorTextElement.textContent = message;
    errorElement.classList.remove('hidden');
  }

  function updateRuleModals() {
    console.log('Updating rule modals...');
    const container = document.getElementById('ruleModals');
    container.innerHTML = '';
    currentRules.forEach((rule, index) => {
      console.log(`Creating rule modal for rule ${index}:`, rule);
      const ruleModal = document.createElement('astro-island');
      ruleModal.setAttribute('component-url', '/src/components/RuleModal.svelte');
      ruleModal.setAttribute('component-export', 'default');
      ruleModal.setAttribute('renderer-url', '/src/renderers/svelte.js');
      ruleModal.setAttribute('props', JSON.stringify({ rule, index }));
      container.appendChild(ruleModal);
    });
    console.log('Rule modals updated');
  }

  document.addEventListener('astro:page-load', () => {
    console.log('Page loaded, initializing config...');
    initializeConfig();
  });

  document.getElementById('addNewRule').addEventListener('click', () => {
    console.log('Add New Rule button clicked');
    document.getElementById('ruleModals').classList.add('hidden');
    document.getElementById('addNewRule').classList.add('hidden');
    document.getElementById('configForm').classList.remove('hidden');
  });

  document.addEventListener('save', async (event) => {
    console.log('Save event received:', event.detail);
    const { rule, index } = event.detail;
    
    if (index !== undefined && index < currentRules.length) {
      currentRules[index] = rule;
    } else {
      currentRules.push(rule);
    }

    try {
      console.log('Saving configuration...');
      await saveConfiguration({ rules: currentRules });
      console.log('Configuration saved successfully');
      showMessage('Configuration saved successfully');
      updateRuleModals();
    } catch (error) {
      console.error('Error saving configuration:', error);
      showError(error.message);
    }
  });

  function showMessage(message) {
    console.log('Showing message:', message);
    const messageElement = document.getElementById('message');
    messageElement.textContent = message;
    messageElement.classList.remove('hidden');
  }

  // View, edit, and delete event listeners
document.addEventListener('view', (event) => {
  const { rule } = event.detail;
  const viewModal = document.getElementById('viewRuleModal');
  const viewModalComponent = viewModal.querySelector('astro-island');
  viewModalComponent.setAttribute('props', JSON.stringify({ 
    rule, 
    onClose: () => viewModal.classList.add('hidden') 
  }));
  viewModal.classList.remove('hidden');
});

  document.addEventListener('edit', (event) => {
    const { rule, index } = event.detail;
    document.getElementById('ruleModals').classList.add('hidden');
    document.getElementById('addNewRule').classList.add('hidden');
    const configForm = document.getElementById('configForm');
    configForm.classList.remove('hidden');
    configForm.querySelector('astro-island').setAttribute('rule', JSON.stringify(rule));
    configForm.querySelector('astro-island').setAttribute('index', index);
  });

  document.addEventListener('delete', async (event) => {
    const { index } = event.detail;
    if (confirm('Are you sure you want to delete this rule?')) {
      currentRules.splice(index, 1);
      try {
        await saveConfiguration({ rules: currentRules });
        showMessage('Rule deleted successfully');
        updateRuleModals();
      } catch (error) {
        showError(error.message);
      }
    }
  });
</script>
