---
import Layout from '../layouts/Layout.astro';
import RuleForm from '../components/RuleForm.svelte';
import RuleModal from '../components/RuleModal.svelte';
import ViewRuleModal from '../components/ViewRuleModal.svelte';
import { loadConfiguration } from '../lib/config-utils';
import { ADD_RULE_BUTTON_TEXT } from '../lib/config-variables';

let config;
let error;
try {
  config = await loadConfiguration();
} catch (e) {
  error = e.message;
}
---

<Layout title="Rate Limit Configuration">
  <h1 class="text-3xl font-bold mb-8 text-center">Rate Limit Configuration</h1>
  
  {error && <div class="error-message bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
    <strong class="font-bold">Error:</strong>
    <span class="block sm:inline">{error}</span>
  </div>}
  
  <div id="ruleModals" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    {config && config.rules && config.rules.map((rule, index) => (
      <RuleModal client:load {rule} {index} />
    ))}
  </div>

  <button id="addNewRule" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">
    {ADD_RULE_BUTTON_TEXT}
  </button>

  <div id="configForm" class="hidden">
    <RuleForm client:load />
  </div>

  <div id="viewRuleModal" class="hidden">
    <ViewRuleModal client:load />
  </div>

  <div id="message" class="mt-4 text-center font-bold"></div>
</Layout>

<script>
  import { showSaveSuccess, showSaveError } from '../lib/ui-utils';
  import { saveConfiguration } from '../lib/config-utils';
  import { initDragAndDrop } from '../lib/drag-drop-utils';

  let currentRules = [];

  document.addEventListener('astro:page-load', () => {
    const addNewRuleButton = document.getElementById('addNewRule');
    const ruleModals = document.getElementById('ruleModals');
    const configForm = document.getElementById('configForm');
    const viewRuleModal = document.getElementById('viewRuleModal');

    currentRules = JSON.parse(ruleModals.getAttribute('data-rules') || '[]');

    addNewRuleButton.addEventListener('click', () => {
      ruleModals.classList.add('hidden');
      addNewRuleButton.classList.add('hidden');
      configForm.classList.remove('hidden');
    });

    const ruleForm = document.querySelector('astro-island[component-url$="RuleForm.svelte"]');
    ruleForm.addEventListener('save', async (event) => {
      const { rule, index } = event.detail;
      
      if (index !== undefined && index < currentRules.length) {
        currentRules[index] = rule;
      } else {
        currentRules.push(rule);
      }

      try {
        await saveConfiguration({ rules: currentRules });
        showSaveSuccess();
        updateRuleModals();
      } catch (error) {
        showSaveError(error);
      }
    });

    ruleModals.addEventListener('view', (event) => {
      const { rule } = event.detail;
      const viewModal = viewRuleModal.querySelector('astro-island');
      viewModal.setAttribute('rule', JSON.stringify(rule));
      viewRuleModal.classList.remove('hidden');
    });

    ruleModals.addEventListener('edit', (event) => {
      const { rule, index } = event.detail;
      ruleModals.classList.add('hidden');
      addNewRuleButton.classList.add('hidden');
      configForm.classList.remove('hidden');
      ruleForm.setAttribute('rule', JSON.stringify(rule));
      ruleForm.setAttribute('index', index);
    });

    ruleModals.addEventListener('delete', async (event) => {
      const { index } = event.detail;
      if (confirm('Are you sure you want to delete this rule?')) {
        currentRules.splice(index, 1);
        try {
          await saveConfiguration({ rules: currentRules });
          showSaveSuccess();
          updateRuleModals();
        } catch (error) {
          showSaveError(error);
        }
      }
    });

    viewRuleModal.querySelector('astro-island').addEventListener('close', () => {
      viewRuleModal.classList.add('hidden');
    });

    initDragAndDrop(ruleModals, async (newOrder) => {
      currentRules = newOrder.map(index => currentRules[index]);
      try {
        await saveConfiguration({ rules: currentRules });
        showSaveSuccess();
        updateRuleModals();
      } catch (error) {
        showSaveError(error);
      }
    });
  });

  function updateRuleModals() {
    const ruleModals = document.getElementById('ruleModals');
    ruleModals.innerHTML = '';
    currentRules.forEach((rule, index) => {
      const ruleModal = document.createElement('astro-island');
      ruleModal.setAttribute('component-url', '/src/components/RuleModal.svelte');
      ruleModal.setAttribute('component-export', 'default');
      ruleModal.setAttribute('renderer-url', '/src/renderers/renderer.svelte.js');
      ruleModal.setAttribute('props', JSON.stringify({ rule, index }));
      ruleModals.appendChild(ruleModal);
    });
  }
</script>
